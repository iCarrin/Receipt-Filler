exit = ""
    desc = ""
    while exit != "done":# loop through getting item after item

        store = input("store code: ") #we start with the store because it's unique. If it gets past this then it is a new item even if I want to call it the same
        c.execute("SELECT 1 FROM items WHERE store_code = ?", (store))#grab anything that 
        if c.fetchone() > 0:#from that list see if there's at least one item in the list (hence a duplicate)
            print("You already have that item stored")# tell people it's a duplicate
            time.sleep(3)#make sure they can see the message
            pass    #skip this round
        while desc != "new": #the description can be easily a duplicate so just loop until you get a new one
            human = input("you're description (i.e dove shampoo walmart):  ")#get what it's really called first (easiest way to see what it is)
            c.execute("SELECT 1 FROM items WHERE description = ?", (human))#checking it's unique
            if c.fetchone() > 0:
                print("You already have that description stored")
                return
            else:   
                desc = "new" #if it is pass out of the while loop

        add_item(store, human)#add the item
        
        exit = input("type done to be done on hit enter to continue: ") #give chance to break out of the loop




        add ".toupper() to everything



        # def add_item_price(receipt, item, price):
#     conn = sqlite3.connect('receipt_database.db')
#     conn.execute("PRAGMA foreign_keys = ON;")
    
#     # Create a cursor
#     c = conn.cursor()
    
#     # If the table doesn't already exist, create it
#     c.execute("""CREATE TABLE IF NOT EXISTS items_prices(
#               receipt_id INTEGER NOT NULL, 
#               item_id INTEGER NOT NULL,
#               price REAL NOT NULL,
#               FOREIGN KEY (receipt_id) REFERENCES receipts (id) ON DELETE CASCADE, 
#               FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE CASCADE,
#               PRIMARY KEY (receipt_id, item_id)
#               )
#             """)#the knowledge and even this code on how to link tables I got from ChatGPT
    
#     # Insert the item into the table (exclude id since it's auto-incrementing)
#     c.execute("INSERT INTO items_prices VALUES (?,?,?)", (receipt, item, price))
   
#     # Commit the transaction and close the connection
#     conn.commit()
#     conn.close()


# def add_item(gibberish, real=" "):
#     # Connect to the database
#     conn = sqlite3.connect('receipt_database.db')
#     #don't think I need a foreign key call out but incase I find I do. Here it is.
#     # conn.execute("PRAGMA foreign_keys = ON;")
#     # Create a cursor
#     c = conn.cursor()
#     #double checking that I'm not adding a duplicate item to the list of items
#     c.execute("SELECT 1 FROM items WHERE store_code = ? OR description = ?", (gibberish, real))
#     if c.fetchone() is None:
#         # Insert the item into the table (exclude id since it's auto-incrementing)
#         c.execute("INSERT INTO items (store_code, description) VALUES (?, ?)", (gibberish, real))
#     else: 
#         print("Item already exists. skipping")
   
#     # Commit the transaction and close the connection
#     conn.commit()
#     conn.close()


# def add_many():   
#     #Connect to the database
#     conn = sqlite3.connect('receipt_database.db')
#     conn.execute("PRAGMA foreign_keys = ON;")
    
#     # Create a cursor
#     c = conn.cursor()
    
#     # If the table doesn't already exist, create it
#     c.execute("""CREATE TABLE IF NOT EXISTS items(
#               id INTEGER PRIMARY KEY AUTOINCREMENT,
#               store_code TEXT NOT NULL UNIQUE, 
#               description TEXT)
#             """)

#     exit = ""
#     list = []
#     while exit != "done":
#         human = input("you're description: ")
#         store = input("store description: ")
#         list.append((store, human))  
#         exit = input("type done to be done on hit enter to continue: ")

#     # Insert the item into the table (exclude id since it's auto-incrementing)
#     c.executemany("INSERT OR IGNORE INTO items (store_code, description) VALUES (?, ?)", list)

#     # Commit the transaction and close the connection
#     conn.commit()
#     conn.close()
       